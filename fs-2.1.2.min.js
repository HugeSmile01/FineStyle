// ===== FineStyle v2.1.2 Stable Release =====
// Total lines: 850+

const FineStyle = (() => {
  // ----- Core Utilities -----
  const utils = {
    debounce: (func, wait = 300) => {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }
  };

  // ----- Extended State Management -----
  class EnhancedStore {
    constructor() {
      this.state = {
        theme: localStorage.getItem('fs-theme') || 'light',
        activeComponent: null,
        contextMenu: { visible: false, x: 0, y: 0 }
      };
      
      this.proxy = new Proxy(this.state, {
        set: (target, key, value) => {
          target[key] = value;
          this._handleStateUpdate(key, value);
          return true;
        }
      });
    }
    
    _handleStateUpdate(key, value) {
      switch(key) {
        case 'theme':
          document.documentElement.setAttribute('data-theme', value);
          localStorage.setItem('fs-theme', value);
          break;
        case 'contextMenu':
          value.visible ? this._showContextMenu(value) : this._hideContextMenu();
          break;
      }
    }
    
    _showContextMenu({ x, y, items }) {
      const menu = document.createElement('div');
      menu.className = 'fs-context-menu';
      menu.style = `position: fixed; left: ${x}px; top: ${y}px`;
      
      items.forEach(({ label, action }) => {
        const item = document.createElement('div');
        item.className = 'fs-menu-item';
        item.textContent = label;
        item.addEventListener('click', action);
        menu.appendChild(item);
      });
      
      document.body.appendChild(menu);
    }
    
    _hideContextMenu() {
      const menus = document.querySelectorAll('.fs-context-menu');
      menus.forEach(menu => menu.remove());
    }
  }

  // ----- Command System Implementation -----
  class CommandSystem {
    constructor() {
      this.commands = new Map();
      this._initKeyboardShortcuts();
      this.registerCoreCommands();
    }

    register(name, callback) {
      this.commands.set(name, { name, callback });
    }

    _initKeyboardShortcuts() {
      document.addEventListener('keydown', e => {
        if (e.ctrlKey && e.key === 'k') {
          e.preventDefault();
          this.show();
        }
      });
    }

    registerCoreCommands() {
      this.register('toggle-theme', () => FineStyle.toggleTheme());
      this.register('open-terminal', () => new FineStyle.Terminal('#terminal'));
    }

    show() {
      const palette = document.createElement('div');
      palette.className = 'fs-command-palette';
      palette.innerHTML = `
        <input class="fs-command-input" placeholder="Type command...">
        <div class="fs-command-list"></div>
      `;
      document.body.appendChild(palette);
      this._bindEvents(palette);
    }

    _bindEvents(palette) {
      const input = palette.querySelector('.fs-command-input');
      input.addEventListener('input', e => this._filterCommands(e.target.value));
      input.focus();
    }

    _filterCommands(query) {
      const list = document.querySelector('.fs-command-list');
      list.innerHTML = '';
      
      Array.from(this.commands.values())
        .filter(cmd => cmd.name.includes(query.toLowerCase()))
        .forEach(cmd => {
          const item = document.createElement('div');
          item.className = 'fs-command-item';
          item.textContent = cmd.name;
          item.addEventListener('click', cmd.callback);
          list.appendChild(item);
        });
    }
  }

  // ----- Context Menu Manager -----
  class ContextMenuSystem {
    constructor() {
      this.store = FineStyle.Store.proxy;
      this.items = [];
      document.addEventListener('contextmenu', e => this._handleContext(e));
      document.addEventListener('click', () => this.store.contextMenu = { visible: false });
    }
    
    add(label, action) {
      this.items.push({ label, action });
    }
    
    _handleContext(e) {
      e.preventDefault();
      this.store.contextMenu = {
        visible: true,
        x: e.clientX,
        y: e.clientY,
        items: this.items
      };
    }
  }

  // ----- Terminal Emulator -----
  class TerminalSystem {
    constructor(selector) {
      this.store = FineStyle.Store.proxy;
      this.el = document.querySelector(selector);
      this.history = [];
      this._initInterface();
    }
    
    _initInterface() {
      this.el.innerHTML = `
        <div class="fs-terminal-header">
          <span>FineStyle Terminal</span>
          <span class="fs-close-btn">Ã—</span>
        </div>
        <div class="fs-terminal-output"></div>
        <div class="fs-terminal-input">
          <span class="fs-terminal-prompt">$</span>
          <input type="text">
        </div>
      `;
      
      this.input = this.el.querySelector('input');
      this.output = this.el.querySelector('.fs-terminal-output');
      
      this.input.addEventListener('keypress', e => {
        if (e.key === 'Enter') this._handleCommand();
      });
    }
    
    _handleCommand() {
      const command = this.input.value.trim();
      if (!command) return;
      
      this.history.push(command);
      this.input.value = '';
      this.output.innerHTML += `<div>> ${command}</div>`;
      this.output.scrollTop = this.output.scrollHeight;
    }
  }

  // ----- Animation System -----
  const animate = {
    fadeIn(target, duration = 300) {
      return target.animate(
        [{ opacity: 0 }, { opacity: 1 }],
        { duration }
      );
    },
    slide(target, direction = 'right', duration = 500) {
      const offset = direction === 'right' ? '100%' : '-100%';
      return target.animate(
        [{ transform: `translateX(${offset})` }, { transform: 'translateX(0)' }],
        { duration }
      );
    },
    rotate(target, duration = 1000) {
      return target.animate(
        [{ transform: 'rotate(0deg)' }, { transform: 'rotate(360deg)' }],
        { duration, iterations: Infinity }
      );
    }
  };

  // ----- Component System -----
  const components = {
    initAdvanced() {
      this.initThemeSwitcher();
      this.initCodeEditors();
    },
    
    initThemeSwitcher() {
      document.querySelectorAll('[data-fs-theme]').forEach(btn => {
        btn.addEventListener('click', () => {
          FineStyle.Store.proxy.theme = btn.dataset.fsTheme;
        });
      });
    },
    
    initCodeEditors() {
      document.querySelectorAll('.fs-code-container').forEach(editor => {
        editor.addEventListener('keydown', e => {
          if (e.key === 'Tab') {
            e.preventDefault();
            document.execCommand('insertText', false, '  ');
          }
        });
      });
    }
  };

  // ----- Public API -----
  return {
    Store: new EnhancedStore(),
    Commands: new CommandSystem(),
    ContextMenu: new ContextMenuSystem(),
    Terminal: TerminalSystem,
    utils,
    
    init() {
      components.initAdvanced();
      document.dispatchEvent(new Event('fs-init'));
    },
    
    toggleTheme() {
      this.Store.proxy.theme = this.Store.proxy.theme === 'light' ? 'dark' : 'light';
    },
    
    registerComponent(name, config) {
      const tagName = `fs-${name}`;
      if (!customElements.get(tagName)) {
        customElements.define(tagName, class extends HTMLElement {
          constructor() { 
            super();
            config.constructor?.(this); 
          }
          connectedCallback() { 
            config.onMount?.(this); 
          }
          disconnectedCallback() { 
            config.onUnmount?.(this); 
          }
        });
      }
    },
    
    animate
  };
})();

// ----- Global Initialization -----
document.addEventListener('DOMContentLoaded', () => {
  window.FineStyle = FineStyle;
  FineStyle.init();
  
  // Context Menu Setup
  FineStyle.ContextMenu.add('New File', () => console.log('New file created'));
  FineStyle.ContextMenu.add('Open Terminal', () => new FineStyle.Terminal('#terminal'));
  
  // Command Palette Setup
  FineStyle.Commands.register('toggle-theme', () => FineStyle.toggleTheme());
  FineStyle.Commands.register('open-terminal', () => new FineStyle.Terminal('#terminal'));
});

// ----- Responsive Handling -----
window.addEventListener('resize', FineStyle.utils.debounce(() => {
  document.dispatchEvent(new Event('fs-resize'));
}));