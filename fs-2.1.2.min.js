const FineStyle = (() => {
  // ----- Core Utilities -----
  const utils = {
    debounce: (func, wait = 300) => {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }
  };

  // ----- Extended State Management -----
  class EnhancedStore {
    constructor() {
      this.state = {
        theme: localStorage.getItem('fs-theme') || 'light',
        activeComponent: null,
        contextMenu: { visible: false, x: 0, y: 0 }
      };
      
      this.proxy = new Proxy(this.state, {
        set: (target, key, value) => {
          target[key] = value;
          this._handleStateUpdate(key, value);
          return true;
        }
      });
    }
    
    _handleStateUpdate(key, value) {
      switch(key) {
        case 'theme':
          document.documentElement.setAttribute('data-theme', value);
          localStorage.setItem('fs-theme', value);
          break;
        case 'contextMenu':
          value.visible ? this._showContextMenu(value) : this._hideContextMenu();
          break;
      }
    }
    
    _showContextMenu({ x, y, items }) {
      const menu = document.createElement('div');
      menu.className = 'fs-context-menu';
      menu.style = `position: fixed; left: ${x}px; top: ${y}px`;
      
      items.forEach(({ label, action }) => {
        const item = document.createElement('div');
        item.className = 'fs-menu-item';
        item.textContent = label;
        item.addEventListener('click', action);
        menu.appendChild(item);
      });
      
      document.body.appendChild(menu);
    }
    
    _hideContextMenu() {
      const menus = document.querySelectorAll('.fs-context-menu');
      menus.forEach(menu => menu.remove());
    }
  }

  // ----- Command System Implementation -----
  class CommandSystem {
    constructor() {
      this.commands = new Map();
      this._initKeyboardShortcuts();
      this.registerCoreCommands();
    }

    register(name, callback) {
      this.commands.set(name, { name, callback });
    }

    _initKeyboardShortcuts() {
      document.addEventListener('keydown', e => {
        if (e.ctrlKey && e.key === 'k') {
          e.preventDefault();
          this.show();
        }
      });
    }

    registerCoreCommands() {
      this.register('toggle-theme', () => FineStyle.toggleTheme());
      this.register('open-terminal', () => new FineStyle.Terminal('#terminal'));
    }

    show() {
      const palette = document.createElement('div');
      palette.className = 'fs-command-palette';
      palette.innerHTML = `
        <input class="fs-command-input" placeholder="Type command...">
        <div class="fs-command-list"></div>
      `;
      document.body.appendChild(palette);
      this._bindEvents(palette);
    }

    _bindEvents(palette) {
      const input = palette.querySelector('.fs-command-input');
      input.addEventListener('input', e => this._filterCommands(e.target.value));
      input.focus();
    }

    _filterCommands(query) {
      const list = document.querySelector('.fs-command-list');
      list.innerHTML = '';
      
      Array.from(this.commands.values())
        .filter(cmd => cmd.name.includes(query.toLowerCase()))
        .forEach(cmd => {
          const item = document.createElement('div');
          item.className = 'fs-command-item';
          item.textContent = cmd.name;
          item.addEventListener('click', cmd.callback);
          list.appendChild(item);
        });
    }
  }

  // ----- Animation Function -----
  const animate = (element, animationType, options = {}) => {
    const animations = {
      'fade-in': 'fs-animate-fade-in',
      'slide-in': 'fs-animate-slide-in',
      'zoom-in': 'fs-animate-zoom-in',
      'float': 'fs-animate-float',
      'fade-in-up': 'fs-animate-fade-in-up',
      'fade-in-down': 'fs-animate-fade-in-down',
      'fade-in-left': 'fs-animate-fade-in-left',
      'fade-in-right': 'fs-animate-fade-in-right'
    };

    const animationClass = animations[animationType];
    if (animationClass) {
      element.classList.add(animationClass);
      if (options.duration) {
        element.style.animationDuration = options.duration;
      }
      if (options.delay) {
        element.style.animationDelay = options.delay;
      }
    }
  };

  // ----- Components System -----
  const components = {
    initAdvanced() {
      // Initialize advanced components
      this.initScrollReveal();
      this.initResponsiveComponents();
    },
    
    initScrollReveal() {
      const scrollElements = document.querySelectorAll('.animate-on-scroll');
      scrollElements.forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(20px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      });
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }
        });
      });
      
      scrollElements.forEach(el => observer.observe(el));
    },
    
    initResponsiveComponents() {
      const components = document.querySelectorAll('.fs-component');
      components.forEach(component => {
        component.style.transition = 'all 0.3s ease';
      });
    }
  };

  // ----- Context Menu System -----
  class ContextMenuSystem {
    constructor() {
      this.menu = null;
      this.items = new Map();
    }
    
    add(label, callback) {
      this.items.set(label, callback);
    }
    
    show(x, y) {
      if (this.menu) this.hide();
      
      this.menu = document.createElement('div');
      this.menu.className = 'fs-context-menu';
      this.menu.style.cssText = `
        position: fixed;
        top: ${y}px;
        left: ${x}px;
        background: var(--surface-0);
        border: 1px solid var(--surface-200);
        border-radius: var(--radius-base);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        z-index: 1000;
        min-width: 150px;
      `;
      
      this.items.forEach((callback, label) => {
        const item = document.createElement('div');
        item.className = 'fs-context-menu-item';
        item.textContent = label;
        item.style.cssText = `
          padding: 0.5rem 1rem;
          cursor: pointer;
          border-bottom: 1px solid var(--surface-100);
        `;
        item.addEventListener('click', () => {
          callback();
          this.hide();
        });
        this.menu.appendChild(item);
      });
      
      document.body.appendChild(this.menu);
    }
    
    hide() {
      if (this.menu) {
        this.menu.remove();
        this.menu = null;
      }
    }
  }

  // ----- Terminal System -----
  class Terminal {
    constructor(selector) {
      this.container = typeof selector === 'string' ? document.querySelector(selector) : selector;
      if (this.container) {
        this.init();
      }
    }
    
    init() {
      this.container.innerHTML = `
        <div class="fs-terminal">
          <div class="fs-terminal-header">
            <span>Terminal</span>
            <button onclick="this.parentElement.parentElement.remove()">×</button>
          </div>
          <div class="fs-terminal-content">
            <div><span class="fs-terminal-prompt">$</span> Welcome to FineStyle Terminal</div>
          </div>
        </div>
      `;
    }
  }

  // ----- Modal System -----
  class Modal {
    constructor(content, options = {}) {
      this.options = { closable: true, ...options };
      this.create(content);
    }
    
    create(content) {
      this.modal = document.createElement('div');
      this.modal.className = 'fs-modal';
      this.modal.innerHTML = `
        <div class="fs-modal-content">
          <div class="fs-modal-header">
            <h3>${this.options.title || 'Modal'}</h3>
            ${this.options.closable ? '<button class="fs-modal-close">×</button>' : ''}
          </div>
          <div class="fs-modal-body">${content}</div>
        </div>
      `;
      
      if (this.options.closable) {
        this.modal.querySelector('.fs-modal-close').addEventListener('click', () => this.close());
        this.modal.addEventListener('click', (e) => {
          if (e.target === this.modal) this.close();
        });
      }
      
      document.body.appendChild(this.modal);
    }
    
    show() {
      this.modal.classList.add('active');
      return this;
    }
    
    close() {
      this.modal.classList.remove('active');
      setTimeout(() => this.modal.remove(), 300);
    }
  }

  // ----- Toast Notification System -----
  class Toast {
    static container = null;
    
    static init() {
      if (!this.container) {
        this.container = document.createElement('div');
        this.container.className = 'fs-toast-container';
        document.body.appendChild(this.container);
      }
    }
    
    static show(message, type = 'info', duration = 3000) {
      this.init();
      
      const toast = document.createElement('div');
      toast.className = `fs-toast ${type}`;
      toast.innerHTML = `
        <div class="fs-toast-content">
          <strong>${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
          <p>${message}</p>
        </div>
      `;
      
      this.container.appendChild(toast);
      
      // Trigger animation
      setTimeout(() => toast.classList.add('show'), 10);
      
      // Auto remove
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 300);
      }, duration);
      
      return toast;
    }
    
    static success(message, duration) { return this.show(message, 'success', duration); }
    static warning(message, duration) { return this.show(message, 'warning', duration); }
    static error(message, duration) { return this.show(message, 'error', duration); }
  }

  // ----- Loading State Manager -----
  class LoadingState {
    static show(element) {
      if (typeof element === 'string') {
        element = document.querySelector(element);
      }
      if (element) {
        element.classList.add('fs-loading');
      }
    }
    
    static hide(element) {
      if (typeof element === 'string') {
        element = document.querySelector(element);
      }
      if (element) {
        element.classList.remove('fs-loading');
      }
    }
  }

  // ----- Enhanced Public API -----
  return {
    Store: new EnhancedStore(),
    Commands: new CommandSystem(),
    ContextMenuSystem,
    Terminal,
    Modal,
    Toast,
    LoadingState,
    utils,
    
    init() {
      components.initAdvanced();
      document.dispatchEvent(new Event('fs-init'));
    },
    
    toggleTheme() {
      this.Store.proxy.theme = this.Store.proxy.theme === 'light' ? 'dark' : 'light';
    },
    
    registerComponent(name, config) {
      const tagName = `fs-${name}`;
      if (!customElements.get(tagName)) {
        customElements.define(tagName, class extends HTMLElement {
          constructor() { 
            super();
            config.constructor?.(this); 
          }
          connectedCallback() { 
            config.onMount?.(this); 
          }
          disconnectedCallback() { 
            config.onUnmount?.(this); 
          }
        });
      }
    },
    
    animate
  };
})();

// ----- Global Initialization -----
document.addEventListener('DOMContentLoaded', () => {
  window.FineStyle = FineStyle;
  FineStyle.init();
  
  // Context Menu Setup
  FineStyle.ContextMenu = new FineStyle.ContextMenuSystem();
  FineStyle.ContextMenu.add('New File', () => console.log('New file created'));
  FineStyle.ContextMenu.add('Open Terminal', () => new FineStyle.Terminal('#terminal'));
  
  // Command Palette Setup
  FineStyle.Commands.register('toggle-theme', () => FineStyle.toggleTheme());
  FineStyle.Commands.register('open-terminal', () => new FineStyle.Terminal('#terminal'));

  // Side Knob Functionality
  const menuToggle = document.querySelector('#menu-toggle');
  const navLinks = document.querySelector('#nav-links');
  const sideNav = document.querySelector('#side-nav');

  if (menuToggle && sideNav) {
    menuToggle.addEventListener('click', () => {
      sideNav.classList.toggle('active');
    });

    document.addEventListener('click', (event) => {
      if (!sideNav.contains(event.target) && !menuToggle.contains(event.target)) {
        sideNav.classList.remove('active');
      }
    });
  }

  // Smooth Scrolling
  const smoothScroll = (target, duration) => {
    const targetElement = document.querySelector(target);
    const targetPosition = targetElement.getBoundingClientRect().top;
    const startPosition = window.pageYOffset;
    const startTime = null;

    const ease = (t, b, c, d) => {
      t /= d / 2;
      if (t < 1) return c / 2 * t * t + b;
      t--;
      return -c / 2 * (t * (t - 2) - 1) + b;
    };

    const animation = currentTime => {
      if (startTime === null) startTime = currentTime;
      const timeElapsed = currentTime - startTime;
      const run = ease(timeElapsed, startPosition, targetPosition, duration);
      window.scrollTo(0, run);
      if (timeElapsed < duration) requestAnimationFrame(animation);
    };

    requestAnimationFrame(animation);
  };

  document.querySelectorAll('.nav-links a').forEach(anchor => {
    anchor.addEventListener('click', function(e) {
      e.preventDefault();
      const target = this.getAttribute('href');
      smoothScroll(target, 1000);
    });
  });

  // Scrollspy Feature
  const sections = document.querySelectorAll('section');
  const navItems = document.querySelectorAll('.fs-nav-item');

  window.addEventListener('scroll', () => {
    let current = '';

    sections.forEach(section => {
      const sectionTop = section.offsetTop;
      if (pageYOffset >= sectionTop - 60) {
        current = section.getAttribute('id');
      }
    });

    navItems.forEach(item => {
      item.classList.remove('active');
      if (item.getAttribute('href').includes(current)) {
        item.classList.add('active');
      }
    });
  });

  // Initialize Feather Icons
  feather.replace();
});

// ----- Responsive Handling -----
window.addEventListener('resize', FineStyle.utils.debounce(() => {
  document.dispatchEvent(new Event('fs-resize'));
}));

// Implement ARIA attributes to improve the accessibility of dynamic content and interactive elements
document.querySelectorAll('.fs-context-menu').forEach(menu => {
  menu.setAttribute('role', 'menu');
  menu.querySelectorAll('.fs-menu-item').forEach(item => {
    item.setAttribute('role', 'menuitem');
  });
});

// Ensure sufficient color contrast between text and background colors to improve readability for users with visual impairments
document.querySelectorAll('.fs-menu-item').forEach(item => {
  item.style.color = 'var(--surface-900)';
  item.style.backgroundColor = 'var(--surface-0)';
});

// Provide alternative text for images and icons to assist screen readers
document.querySelectorAll('img').forEach(img => {
  if (!img.alt) {
    img.alt = 'Image';
  }
});

// Implement keyboard navigation to allow users to navigate through the interface using the keyboard
document.addEventListener('keydown', e => {
  if (e.key === 'Tab') {
    const focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
    const firstFocusableElement = document.querySelectorAll(focusableElements)[0];
    const focusableContent = document.querySelectorAll(focusableElements);
    const lastFocusableElement = focusableContent[focusableContent.length - 1];

    if (e.shiftKey) {
      if (document.activeElement === firstFocusableElement) {
        lastFocusableElement.focus();
        e.preventDefault();
      }
    } else {
      if (document.activeElement === lastFocusableElement) {
        firstFocusableElement.focus();
        e.preventDefault();
      }
    }
  }
});

// Ensure form controls have associated labels and use appropriate input types
document.querySelectorAll('input, textarea').forEach(input => {
  if (!input.labels.length) {
    const label = document.createElement('label');
    label.textContent = input.placeholder || 'Input';
    input.parentNode.insertBefore(label, input);
  }
});

// Test the design with screen readers and other assistive technologies to identify and address any accessibility issues
// This step requires manual testing with screen readers and other assistive technologies.

// Implement additional media queries for various screen sizes
const mediaQueries = [
  { query: '(max-width: 1200px)', callback: () => console.log('Screen width is 1200px or less') },
  { query: '(max-width: 992px)', callback: () => console.log('Screen width is 992px or less') },
  { query: '(max-width: 768px)', callback: () => console.log('Screen width is 768px or less') },
  { query: '(max-width: 576px)', callback: () => console.log('Screen width is 576px or less') }
];

mediaQueries.forEach(({ query, callback }) => {
  const mediaQueryList = window.matchMedia(query);
  mediaQueryList.addListener(e => {
    if (e.matches) {
      callback();
    }
  });
  if (mediaQueryList.matches) {
    callback();
  }
});

// Ensure all components adapt well to different devices and orientations
const adaptComponents = () => {
  const components = document.querySelectorAll('.fs-component');
  components.forEach(component => {
    if (window.innerWidth < 768) {
      component.classList.add('mobile');
    } else {
      component.classList.remove('mobile');
    }
  });
};

window.addEventListener('resize', adaptComponents);
document.addEventListener('DOMContentLoaded', adaptComponents);

// Test the design on multiple devices to identify and fix any responsiveness issues
const testResponsiveness = () => {
  const devices = [
    { name: 'iPhone 6/7/8', width: 375, height: 667 },
    { name: 'iPad', width: 768, height: 1024 },
    { name: 'Desktop', width: 1440, height: 900 }
  ];

  devices.forEach(device => {
    window.resizeTo(device.width, device.height);
    console.log(`Testing on ${device.name}`);
    // Add your testing logic here
  });
};

testResponsiveness();
