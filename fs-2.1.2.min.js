const FineStyle = (() => {
  // ----- Core Utilities -----
  const utils = {
    debounce: (func, wait = 300) => {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }
  };

  // ----- Extended State Management -----
  class EnhancedStore {
    constructor() {
      this.state = {
        theme: localStorage.getItem('fs-theme') || 'light',
        activeComponent: null,
        contextMenu: { visible: false, x: 0, y: 0 }
      };
      
      this.proxy = new Proxy(this.state, {
        set: (target, key, value) => {
          target[key] = value;
          this._handleStateUpdate(key, value);
          return true;
        }
      });
    }
    
    _handleStateUpdate(key, value) {
      switch(key) {
        case 'theme':
          document.documentElement.setAttribute('data-theme', value);
          localStorage.setItem('fs-theme', value);
          break;
        case 'contextMenu':
          value.visible ? this._showContextMenu(value) : this._hideContextMenu();
          break;
      }
    }
    
    _showContextMenu({ x, y, items }) {
      const menu = document.createElement('div');
      menu.className = 'fs-context-menu';
      menu.style = `position: fixed; left: ${x}px; top: ${y}px`;
      
      items.forEach(({ label, action }) => {
        const item = document.createElement('div');
        item.className = 'fs-menu-item';
        item.textContent = label;
        item.addEventListener('click', action);
        menu.appendChild(item);
      });
      
      document.body.appendChild(menu);
    }
    
    _hideContextMenu() {
      const menus = document.querySelectorAll('.fs-context-menu');
      menus.forEach(menu => menu.remove());
    }
  }

  // ----- Command System Implementation -----
  class CommandSystem {
    constructor() {
      this.commands = new Map();
      this._initKeyboardShortcuts();
      this.registerCoreCommands();
    }

    register(name, callback) {
      this.commands.set(name, { name, callback });
    }

    _initKeyboardShortcuts() {
      document.addEventListener('keydown', e => {
        if (e.ctrlKey && e.key === 'k') {
          e.preventDefault();
          this.show();
        }
      });
    }

    registerCoreCommands() {
      this.register('toggle-theme', () => FineStyle.toggleTheme());
      this.register('open-terminal', () => new FineStyle.Terminal('#terminal'));
    }

    show() {
      const palette = document.createElement('div');
      palette.className = 'fs-command-palette';
      palette.innerHTML = `
        <input class="fs-command-input" placeholder="Type command...">
        <div class="fs-command-list"></div>
      `;
      document.body.appendChild(palette);
      this._bindEvents(palette);
    }

    _bindEvents(palette) {
      const input = palette.querySelector('.fs-command-input');
      input.addEventListener('input', e => this._filterCommands(e.target.value));
      input.focus();
    }

    _filterCommands(query) {
      const list = document.querySelector('.fs-command-list');
      list.innerHTML = '';
      
      Array.from(this.commands.values())
        .filter(cmd => cmd.name.includes(query.toLowerCase()))
        .forEach(cmd => {
          const item = document.createElement('div');
          item.className = 'fs-command-item';
          item.textContent = cmd.name;
          item.addEventListener('click', cmd.callback);
          list.appendChild(item);
        });
    }
  }

  // ----- Public API -----
  return {
    Store: new EnhancedStore(),
    Commands: new CommandSystem(),
    utils,
    
    init() {
      components.initAdvanced();
      document.dispatchEvent(new Event('fs-init'));
    },
    
    toggleTheme() {
      this.Store.proxy.theme = this.Store.proxy.theme === 'light' ? 'dark' : 'light';
    },
    
    registerComponent(name, config) {
      const tagName = `fs-${name}`;
      if (!customElements.get(tagName)) {
        customElements.define(tagName, class extends HTMLElement {
          constructor() { 
            super();
            config.constructor?.(this); 
          }
          connectedCallback() { 
            config.onMount?.(this); 
          }
          disconnectedCallback() { 
            config.onUnmount?.(this); 
          }
        });
      }
    },
    
    animate
  };
})();

// ----- Global Initialization -----
document.addEventListener('DOMContentLoaded', () => {
  window.FineStyle = FineStyle;
  FineStyle.init();
  
  // Context Menu Setup
  FineStyle.ContextMenu = new ContextMenuSystem();
  FineStyle.ContextMenu.add('New File', () => console.log('New file created'));
  FineStyle.ContextMenu.add('Open Terminal', () => new FineStyle.Terminal('#terminal'));
  
  // Command Palette Setup
  FineStyle.Commands.register('toggle-theme', () => FineStyle.toggleTheme());
  FineStyle.Commands.register('open-terminal', () => new FineStyle.Terminal('#terminal'));
});

// ----- Responsive Handling -----
window.addEventListener('resize', FineStyle.utils.debounce(() => {
  document.dispatchEvent(new Event('fs-resize'));
}));
